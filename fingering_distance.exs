# Chord.Distance.Fingering.distance(
#   [{3, 1}, {5, 3}, {5, 4}, {4, 2}, nil, nil],
#   [{3, 2}, {2, 1}, nil, nil, {3, 3}, {3, 4}]
#   # place: 0.5047586516983624,
#   # lift: 0.5453389258513982,
#   # slide: 0.8198123289383199,
#   # noop: 0.5800564331056672,
#   # move: 0.029133636514967715
# )
# |> IO.inspect()

# Chord.Distance.Fingering.distance(
#   [{3, 1}, {5, 3}, {5, 4}, {4, 2}, nil, nil],
#   [{3, 1}, {5, 3}, {3, 1}, {4, 2}, nil, nil]
#   # place: 0.5047586516983624,
#   # lift: 0.5453389258513982,
#   # slide: 0.8198123289383199,
#   # noop: 0.5800564331056672,
#   # move: 0.029133636514967715
# )
# |> IO.inspect()

# Chord.Distance.Fingering.distance(
#   [nil, {3, 3}, {2, 2}, {0, nil}, {1, 1}, nil],
#   [nil, {3, 3}, {2, 2}, {0, nil}, {0, nil}, nil]
#   # place: 0.5047586516983624,
#   # lift: 0.5453389258513982,
#   # slide: 0.8198123289383199,
#   # noop: 0.5800564331056672,
#   # move: 0.029133636514967715
# )
# |> IO.inspect()

# Chord.Distance.Fingering.distance(
#   [nil, {3, 3}, {2, 2}, {0, nil}, {1, 1}, nil],
#   [nil, {5, 3}, {4, 2}, {5, 4}, {3, 1}, nil]
#   # place: 0.5047586516983624,
#   # lift: 0.5453389258513982,
#   # slide: 0.8198123289383199,
#   # noop: 0.5800564331056672,
#   # move: 0.029133636514967715
# )
# |> IO.inspect()

# Chord.Distance.Fingering.distance(
#   [nil, {3, 1}, {5, 3}, {4, 2}, {5, 4}, nil],
#   [nil, {3, 1}, {5, 3}, {5, 3}, {5, 3}, nil]
#   # place: 0.5047586516983624,
#   # lift: 0.5453389258513982,
#   # slide: 0.8198123289383199,
#   # noop: 0.5800564331056672,
#   # move: 0.029133636514967715
# )
# |> IO.inspect()

# Chord.Distance.Fingering.distance(
#   [nil, {5, 2}, {5, 3}, {4, 1}, {6, 4}, nil],
#   [nil, {3, 1}, {5, 3}, {5, 3}, {5, 3}, nil]
#   # place: 0.5047586516983624,
#   # lift: 0.5453389258513982,
#   # slide: 0.8198123289383199,
#   # noop: 0.5800564331056672,
#   # move: 0.029133636514967715
# )
# |> IO.inspect()

# from = [nil, {5, 2}, {5, 3}, {4, 1}, {6, 4}, nil]
from = [nil, {3, 1}, {5, 3}, {5, 3}, {5, 3}, nil]
to = [nil, {5, 1}, {7, 3}, {6, 2}, {7, 4}, nil]

# noop on nil nil
# slide finger 1 from 3 to 5
# slide finger 3 from 5 to 7
# place finger 2 on 6
# place finger 7 on 4

Chord.Distance.Fingering.distance(from, to)
|> IO.inspect()

# to
# |> Chord.Fingering.fingerings()
# |> Enum.map(
#   &{Chord.Distance.Fingering.distance(
#      from,
#      &1,
#      place: 0.0089211437410203,
#      lift: 0.020349247136887075,
#      move_fret: 0.22349057072362133,
#      move_string: 0.727349495764933,
#      move: 0.2720708272830039,
#      lift_bar: 0.2224527647504756,
#      place_bar: 1.011050522090425
#    ), &1}
# )
# |> Enum.sort()
# |> IO.inspect()

# defmodule DocNeedsAModule do
#   @doc """
#   [
#     {5, [nil, {3, 2}, {5, 3}, {5, 3}, {5, 4}, nil]}, #TODO: Weird...
#     {6, [nil, {3, 1}, {5, 3}, {5, 2}, {5, 4}, nil]},
#     {6, [nil, {3, 1}, {5, 3}, {5, 3}, {5, 4}, nil]},
#     {6, [nil, {3, 2}, {5, 3}, {5, 3}, {5, 3}, nil]},
#     {6, [nil, {3, 2}, {5, 3}, {5, 4}, {5, 3}, nil]},
#     {6, [nil, {3, 2}, {5, 3}, {5, 4}, {5, 4}, nil]},
#     {7, [nil, {3, 1}, {5, 3}, {5, 2}, {5, 2}, nil]},
#     {7, [nil, {3, 1}, {5, 3}, {5, 2}, {5, 3}, nil]},
#     {7, [nil, {3, 1}, {5, 3}, {5, 3}, {5, 2}, nil]},
#     {7, [nil, {3, 1}, {5, 3}, {5, 3}, {5, 3}, nil]},
#     {7, [nil, {3, 1}, {5, 3}, {5, 4}, {5, 2}, nil]},
#     {7, [nil, {3, 1}, {5, 3}, {5, 4}, {5, 3}, nil]},
#     {7, [nil, {3, 1}, {5, 3}, {5, 4}, {5, 4}, nil]},
#     {8, [nil, {3, 1}, {5, 2}, {5, 2}, {5, 4}, nil]},
#     {8, [nil, {3, 1}, {5, 2}, {5, 3}, {5, 4}, nil]},
#     {9, [nil, {3, 1}, {5, 2}, {5, 2}, {5, 2}, nil]},
#     {9, [nil, {3, 1}, {5, 2}, {5, 2}, {5, 3}, nil]},
#     {9, [nil, {3, 1}, {5, 2}, {5, 3}, {5, 2}, nil]},
#     {9, [nil, {3, 1}, {5, 2}, {5, 3}, {5, 3}, nil]},
#     {9, [nil, {3, 1}, {5, 2}, {5, 4}, {5, 2}, nil]},
#     {9, [nil, {3, 1}, {5, 2}, {5, 4}, {5, 3}, nil]},
#     {9, [nil, {3, 1}, {5, 2}, {5, 4}, {5, 4}, nil]},
#     {9, [nil, {3, 2}, {5, 4}, {5, 3}, {5, 3}, nil]},
#     {9, [nil, {3, 2}, {5, 4}, {5, 3}, {5, 4}, nil]},
#     {9, [nil, {3, 2}, {5, 4}, {5, 4}, {5, 3}, nil]},
#     {9, [nil, {3, 2}, {5, 4}, {5, 4}, {5, 4}, nil]},
#     {10, [nil, {3, 1}, {5, 4}, {5, 2}, {5, 2}, nil]},
#     {10, [nil, {3, 1}, {5, 4}, {5, 2}, {5, 3}, nil]},
#     {10, [nil, {3, 1}, {5, 4}, {5, 2}, {5, 4}, nil]},
#     {10, [nil, {3, 1}, {5, 4}, {5, 3}, {5, 2}, nil]},
#     {10, [nil, {3, 1}, {5, 4}, {5, 3}, {5, 3}, nil]},
#     {10, [nil, {3, 1}, {5, 4}, {5, 3}, {5, 4}, nil]},
#     {10, [nil, {3, 1}, {5, 4}, {5, 4}, {5, 2}, nil]},
#     {10, [nil, {3, 1}, {5, 4}, {5, 4}, {5, 3}, nil]},
#     {10, [nil, {3, 1}, {5, 4}, {5, 4}, {5, 4}, nil]},
#     {10, [nil, {3, 3}, {5, 4}, {5, 4}, {5, 4}, nil]}
#   ]
#   """
# end
